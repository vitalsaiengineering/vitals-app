// Save WealthBox configuration and associated advisor tokens
app.post("/api/wealthbox/save-config", async (req, res) => {
  try {
    const { accessToken, settings } = req.body;
    const user = req.user as any;
    console.log("Saving Wealthbox configuration for user:", user.id);
    console.log("accessToken:", accessToken);
    console.log("settings:", settings);

    if (!accessToken) {
      return res
        .status(400)
        .json({ success: false, message: "Access token is required" });
    }

    // Test connection before saving
    try {
      const isConnected = await testWealthboxConnectionHandler(req, res);
      console.log("Wealthbox connection status:", isConnected);
      if (!isConnected) {
        return res
          .status(401)
          .json({ success: false, message: "Invalid access token" });
      }
    } catch (error) {
      console.error("Error testing Wealthbox connection:", error);
      if (!res.headersSent) { // Check if headers are already sent
        return res.status(500).json({
          success: false,
          message: "Failed to test Wealthbox connection",
        });
      }
      return; // Prevent further execution if headers are already sent
    }

    const integrationType = await storage.getIntegrationTypeByName("wealthbox");
    console.log("integrationType:", integrationType);

    // Get or create firm integration config
    let firmIntegration = await storage.getFirmIntegrationConfigByFirmId(user.organizationId);
    console.log("Existing firm integration:", firmIntegration);
    if (!firmIntegration) {
      firmIntegration = await storage.createFirmIntegrationConfig({
        firmId: user.organizationId,
        integrationTypeId: integrationType?.id,
        credentials: { api_key: accessToken },
        settings: settings || { sync_frequency: "daily" },
        status: "active",
      });
      console.log("New firm integration created:", firmIntegration);
    }

    // Update firm integration config
    const updatedFirmIntegration = await storage.updateFirmIntegrationConfig(firmIntegration.id, {
      id: firmIntegration.id,
      integrationTypeId: integrationType?.id,
      firmId: user.organizationId,
      credentials: { api_key: accessToken },
      settings: settings || { sync_frequency: "daily" },
      status: "active",
      createdAt: new Date(),
      updatedAt: new Date(),
    });
    console.log("Updated firm integration:", updatedFirmIntegration);

    // Get or create advisor auth token
    let advisorAuthToken = await storage.getAdvisorAuthTokenByUserId(user.id, user.organizationId);
    console.log("Existing advisor auth token:", advisorAuthToken);
    if (!advisorAuthToken) {
      advisorAuthToken = await storage.createAdvisorAuthToken({
        userId: user.id,
        accessToken: accessToken,
        expiresAt: new Date(),
        firmIntegrationConfigId: updatedFirmIntegration.id,
        refreshToken: null,
        tokenType: null,
        scope: null,
        additionalData: {},
      });
      console.log("New advisor auth token created:", advisorAuthToken);
    }

    // Update advisor auth token
    await storage.updateAdvisorAuthToken(advisorAuthToken.id, {
      id: advisorAuthToken.id,
      createdAt: advisorAuthToken.createdAt,
      updatedAt: new Date(),
      firmIntegrationConfigId: updatedFirmIntegration.id,
      userId: user.id,
      accessToken: accessToken,
      refreshToken: advisorAuthToken.refreshToken,
      tokenType: advisorAuthToken.tokenType,
      expiresAt: advisorAuthToken.expiresAt,
      scope: advisorAuthToken.scope,
      additionalData: advisorAuthToken.additionalData,
    });
    console.log("Updated advisor auth token:", advisorAuthToken);

    return res.json({ success: true, data: updatedFirmIntegration });

    // Push task to fetch Wealthbox users to the queue
    userFetchQueue.push(async () => {
      try {
        const wealthboxUsersResponse = await fetch(`/api/wealthbox/users?access_token=${accessToken}`);
        if (!wealthboxUsersResponse.ok) {
          throw new Error('Failed to fetch Wealthbox users');
        }
        
        const wealthboxUsersData = await wealthboxUsersResponse.json();
        console.log('Wealthbox users data:', wealthboxUsersData);
        const saveUsersPromises = wealthboxUsersData.data.users.map(async (wealthboxUser: any) => {
          const userData = {
            id: wealthboxUser.id,
            name: wealthboxUser.name,
            email: wealthboxUser.email,
          };
          return await storage.createUser(userData); // Ensure createUser handles existing users
        });
        await Promise.all(saveUsersPromises);
        console.log("Wealthbox users saved successfully.");
      } catch (error) {
        console.error("Error fetching or saving Wealthbox users:", error);
      }
    });

    
  } catch (error: any) {
    console.error("Error saving Wealthbox configuration:", error);
    if (!res.headersSent) { // Check if headers are already sent
      return res.status(500).json({
        success: false,
        message: error.message || "Failed to save configuration",
      });
    }
  }
});